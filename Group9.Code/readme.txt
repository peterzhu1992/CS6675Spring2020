###### Information ######
# Name:          readme.txt
# Course:        CS 4675/6675
# Semester:      Spring 2020
# Instructor:    Ling Liu
# Author:        Akshat Shetty
#                Adhrit Shetty
#                Jiaxiang Zhu
#                Jin Hyung Park
#########################

This is our read.txt file and we will explain the structure of our code package here.
There are several folders in this package.
(Ordered by functionality and process, not by alphabetical order here)


1. bns:

bns is the blockchain network simulator written by the author of KadCast paper in C++ using NS-3 Library.
We expand upon the original code base and implement our strategy of mincast on top of it.
Please visit the author' s (Elias Rohrer) original repository for more information.
We are only explaning our changes made on the original code base here.

- Anything that is not mentioned here have minor or nothing changed in the codes.

- vanilla-node.cc / vanilla-node.h / kadcast-node.cc / kadcast-node.h:
  We keep majority of the vanilla broadcast flooding functionalities the same.
  Only makes a few changes on the spacings and log output for easier analysis and plotting later.

- bns.cc:
  This file contains the main function of the simulator.
  We have added necessary imports and additional logs to support MinCast.
  The default parameters have also been changed both on the functionalities and the values.
  Parameters "mincastUseScores" and "nBlocks" are added for the Score System and for mined block limitation.
  MinCast is added as one of the options to run alongside Vanilla and KadCast.
  We have also set the number of miners to 1 so the results can be expected and consistant for comparisons.

- bitcoin-node.cc / bitcoin-node.h:
  This is the place where the Score System located.
  We use nBlocks parameter to compare with the blocks that have been mined by the miners.
  If the threshold is reached, we stop the miner so there is no more new blocks.
  The broadcast will still happen for all the existing mined blocks.

- mincast-messages.cc / mincast-messages.h:
  We have added new message types to support MinCast knowledge/information messages alongside blocks.
  Ping/Pong is used to handle the inform/request, as well as the related properties.OB
  The node who receives and acknowledges the information will be able to request the actual block later.

- mincast-node.cc / mincast-node.h:
  We have added the necessary functionalities to handle the messages holding the information in send/receive queues.
  The InformRatio is implemented to decide how many peers to receive the actual block vs. the information messages.
  The Score System is implemented to decide the above payloads based on the point-to-point latency scores.

- vis.py:
  This is a Python script we write to plot graphs using matplotlab library.
  It will analyze the logs and generate graphs for each blocks' propagation, coverage, overheads, and more.

###############################################################################################

2. urls:

- main_urls.txt:
  These are the urls for our testing/evaluation data logs, our code repository, and the original BNS simulator repository.

###############################################################################################

3. logs:

We have a total of 8 scenarios & multiple runs across Vanilla, KadCast, and MinCast.
Each scenario will be tested with:
* unlimited blocks + 60 minutes
* 1 block + 1000 minutes
* 10 blocks + 1000 minutes

Each run will have a total of 500 peers, minimum of 1 block mined, and maximum of 1 working miner.

- vanilla:
  This contains the logs of vanilla unsolicited, and vanilla solicited scenarios.

- kadcast:
  This contains the logs of kadcast with 3 parallel broadcasts, and kadcast with 5 parallel broadcasts.

- mincast:
  This contains the logs of mincast with 3 parallel broadcasts without using Score System.
  This contains the logs of mincast with 3 parallel broadcasts without using Score System.
  This contains the logs of mincast with 5 parallel broadcasts using Score System.
  This contains the logs of mincast with 5 parallel broadcasts using Score System.


###############################################################################################

4. graphs:

This folder contains all the graphs we generated by using the vis.py scripts.
You would see graphs for every log here.

###############################################################################################

As for other information on data analysis and results, please check our final powerpoint for more information.
Thank you very much.
Group 9 (Akshat Shetty, Adhrit Shetty, Jiaxiang Zhu, Jin Hyung Park)



